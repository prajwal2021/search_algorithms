import util

class DFS(object):
    def depthFirstSearch(self, problem):
        """
        Search the deepest nodes in the search tree first
        [2nd Edition: p 75, 3rd Edition: p 87]

        Your search algorithm needs to return a list of actions that reaches
        the goal.  Make sure to implement a graph search algorithm
        [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

        To get started, you might want to try some of these simple commands to
        understand the search problem that is being passed in:

        print "Start:", problem.getStartState()
        print "Is the start a goal?", problem.isGoalState(problem.getStartState())
        print "Start's successors:", problem.getSuccessors(problem.getStartState())
        """
        """*** TTU CS 5368 Fall 2025 YOUR CODE HERE ***"""
        # Use a stack for DFS (LIFO)
        stack = util.Stack()
        explored = set()

        start = problem.getStartState()
        stack.push((start, []))

        while not stack.isEmpty():
            current_state, path = stack.pop()

            if problem.isGoalState(current_state):
                return path
            
            if current_state not in explored:
                explored.add(current_state)
                for next_state, action, cost in problem.getSuccessors(current_state):
                    if next_state not in explored:
                        new_path = path + [action]
                        stack.push((next_state, new_path))

        return [] # No solution found

class BFS(object):
    def breadthFirstSearch(self, problem):
        """*** TTU CS 5368 Fall 2025 YOUR CODE HERE ***"""
        # Use a queue for BFS (FIFO)
        queue = util.Queue()
        seen = set()

        start = problem.getStartState()
        queue.push((start, []))

        while not queue.isEmpty():
            current_state, path = queue.pop()

            if problem.isGoalState(current_state):
                return path
            
            if current_state not in seen:
                seen.add(current_state)
                for next_state, action, cost in problem.getSuccessors(current_state):
                    if next_state not in seen:
                        new_path = path + [action]
                        queue.push((next_state, new_path))

        return [] # No solution found

class UCS(object):
    def uniformCostSearch(self, problem):
        """*** TTU CS 5368 Fall 2025 YOUR CODE HERE ***"""
        # Use priority queue for UCS (lowest cost first)
        pq = util.PriorityQueue()
        best_costs = {}

        start = problem.getStartState()
        pq.push((start, [], 0), 0)  # (state, path, cost), priority

        while not pq.isEmpty():
            current_state, path, cost = pq.pop()

            if problem.isGoalState(current_state):
                return path
            
            # Skip if we've found a better path to this state
            if current_state in best_costs and cost >= best_costs[current_state]:
                continue
            
            best_costs[current_state] = cost

            for next_state, action, step_cost in problem.getSuccessors(current_state):
                total_cost = cost + step_cost
                if next_state not in best_costs or total_cost < best_costs[next_state]:
                    new_path = path + [action]
                    pq.push((next_state, new_path, total_cost), total_cost)

        return [] # No solution found
        
class aSearch (object):
    def nullHeuristic( state, problem=None):
        """
        A heuristic function estimates the cost from the current state to the nearest goal in the provided SearchProblem.  This heuristic is trivial.
        """
        return 0
    def aStarSearch(self,problem, heuristic=nullHeuristic):
        "Search the node that has the lowest combined cost and heuristic first."
        """*** TTU CS 5368 Fall 2025 YOUR CODE HERE ***"""
        # A* uses priority queue with f(n) = g(n) + h(n)
        pq = util.PriorityQueue()
        best_costs = {}

        start = problem.getStartState()
        f_value = heuristic(start, problem)
        pq.push((start, [], 0), f_value)  # (state, path, g_cost), f_priority

        while not pq.isEmpty():
            current_state, path, g_cost = pq.pop()

            if problem.isGoalState(current_state):
                return path
            
            # Skip if we've found a better path to this state
            if current_state in best_costs and g_cost >= best_costs[current_state]:
                continue
            
            best_costs[current_state] = g_cost

            for next_state, action, step_cost in problem.getSuccessors(current_state):
                new_g_cost = g_cost + step_cost
                if next_state not in best_costs or new_g_cost < best_costs[next_state]:
                    new_path = path + [action]
                    h_value = heuristic(next_state, problem)
                    f_value = new_g_cost + h_value
                    pq.push((next_state, new_path, new_g_cost), f_value)

        return [] # No solution found

